from dependency_injector.wiring import Provide
from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import Application, CallbackQueryHandler, ContextTypes

from src.bot.constants import callback_data, patterns
from src.bot.keyboards import (
    get_checked_categories_keyboard,
    get_subcategories_keyboard,
    get_tasks_and_open_menu_keyboard,
)
from src.bot.services.category import CategoryService
from src.bot.services.user import UserService
from src.bot.utils import delete_previous_message, get_marked_list
from src.core.depends import Container
from src.core.logging.utils import logger_decor


@logger_decor
@delete_previous_message
async def categories_callback(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    category_service: CategoryService = Provide[Container.bot_services_container.bot_category_service],
    user_service: UserService = Provide[Container.bot_services_container.bot_user_service],
):
    context.user_data["parent_id"] = None
    categories = await category_service.get_unarchived_parents_with_children_count()
    selected_categories_with_parents = await user_service.get_user_categories_with_parents(update.effective_user.id)
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–ß—Ç–æ–±—ã —è –∑–Ω–∞–ª, —Å –∫–∞–∫–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏ —Ç—ã –≥–æ—Ç–æ–≤ –ø–æ–º–æ–≥–∞—Ç—å, "
        "–≤—ã–±–µ—Ä–∏ —Å–≤–æ–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å "
        '–Ω–µ—Å–∫–æ–ª—å–∫–æ). –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ, –Ω–∞–∂–º–∏ –Ω–∞ –ø—É–Ω–∫—Ç "–ì–æ—Ç–æ–≤–æ üëå"',
        reply_markup=await get_checked_categories_keyboard(categories, selected_categories_with_parents),
    )


async def view_old_categories_callback(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    user_service: UserService = Provide[Container.bot_services_container.bot_user_service],
):
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–µ—Ä–µ–¥ –∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º."""
    query = update.callback_query
    telegram_id = update.effective_user.id

    categories = await user_service.get_user_categories(telegram_id)
    if not categories:
        await query.message.edit_text(
            text="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã.",
            reply_markup=await get_view_categories_keyboard(),
        )
    else:
        await query.message.edit_text(
            text=(
                "*–¢–≤–æ–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏:*\n\n" "{}\n\n".format(get_marked_list(categories.values(), "üéì "))
            ),
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=await get_view_categories_keyboard(),
        )


async def confirm_categories_callback(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    user_service: UserService = Provide[Container.bot_services_container.bot_user_service],
):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç—á–µ—Ç –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö."""
    query = update.callback_query
    telegram_id = update.effective_user.id

    categories = await user_service.get_user_categories(telegram_id)
    if not categories:
        await query.message.edit_text(
            text="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã.",
            reply_markup=await get_tasks_and_open_menu_keyboard(),
        )
    else:
        await query.message.edit_text(
            text=(
                "*–û—Ç–ª–∏—á–Ω–æ!*\n\n"
                "–¢–µ–ø–µ—Ä—å —Å—é–¥–∞ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏—è—Ö "
                "–≤ —Å–ª–µ–¥—É—é—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö:\n\n{}\n\n"
                "–ê –ø–æ–∫–∞ –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è.".format(get_marked_list(categories.values(), "üéì "))
            ),
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=await get_tasks_and_open_menu_keyboard(),
        )
        await user_service.check_and_set_has_mailing_atribute(telegram_id)


async def all_right_categories_callback(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    user_service: UserService = Provide[Container.bot_services_container.bot_user_service],
):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è)."""
    query = update.callback_query
    telegram_id = update.effective_user.id

    categories = await user_service.get_user_categories(telegram_id)
    if not categories:
        await query.message.edit_text(
            text="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã.",
            reply_markup=await get_open_tasks_and_menu_keyboard(),
        )
    else:
        await query.message.edit_text(
            text=(
                "*–û—Ç–ª–∏—á–Ω–æ!*\n\n"
                "–¢–µ–ø–µ—Ä—å —Å—é–¥–∞ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏—è—Ö "
                "–≤ —Å–ª–µ–¥—É—é—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö:\n\n{}\n\n"
                "–ê –ø–æ–∫–∞ –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è.".format(get_marked_list(categories.values(), "üéì "))
            ),
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=await get_open_tasks_and_menu_keyboard(),
        )


@logger_decor
async def subcategories_callback(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    category_service: CategoryService = Provide[Container.bot_services_container.bot_category_service],
    user_service: UserService = Provide[Container.bot_services_container.bot_user_service],
):
    query = update.callback_query
    parent_id = int(context.match.group(1))
    context.user_data["parent_id"] = parent_id
    subcategories = await category_service.get_unarchived_subcategories(parent_id)
    selected_categories = await user_service.get_user_categories(update.effective_user.id)

    await query.message.edit_text(
        "–ß—Ç–æ–±—ã —è –∑–Ω–∞–ª, —Å –∫–∞–∫–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏ —Ç—ã –≥–æ—Ç–æ–≤ –ø–æ–º–æ–≥–∞—Ç—å, "
        "–≤—ã–±–µ—Ä–∏ —Å–≤–æ–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å "
        '–Ω–µ—Å–∫–æ–ª—å–∫–æ). –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ, –Ω–∞–∂–º–∏ –Ω–∞ –ø—É–Ω–∫—Ç "–ì–æ—Ç–æ–≤–æ üëå"',
        reply_markup=await get_subcategories_keyboard(parent_id, subcategories, selected_categories),
    )


@logger_decor
async def select_subcategory_callback(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    category_service: CategoryService = Provide[Container.bot_services_container.bot_category_service],
    user_service: UserService = Provide[Container.bot_services_container.bot_user_service],
):
    query = update.callback_query
    subcategory_id = int(context.match.group(1))
    selected_categories = await user_service.get_user_categories(update.effective_user.id)

    if subcategory_id not in selected_categories:
        selected_categories[subcategory_id] = None
        await user_service.add_category_to_user(update.effective_user.id, subcategory_id)
    else:
        del selected_categories[subcategory_id]
        await user_service.delete_category_from_user(update.effective_user.id, subcategory_id)

    parent_id = context.user_data["parent_id"]
    subcategories = await category_service.get_unarchived_subcategories(parent_id)

    await query.message.edit_text(
        "–ß—Ç–æ–±—ã —è –∑–Ω–∞–ª, —Å –∫–∞–∫–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏ —Ç—ã –≥–æ—Ç–æ–≤ –ø–æ–º–æ–≥–∞—Ç—å, "
        "–≤—ã–±–µ—Ä–∏ —Å–≤–æ–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å "
        '–Ω–µ—Å–∫–æ–ª—å–∫–æ). –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ, –Ω–∞–∂–º–∏ –Ω–∞ –ø—É–Ω–∫—Ç "–ì–æ—Ç–æ–≤–æ üëå"',
        reply_markup=await get_subcategories_keyboard(parent_id, subcategories, selected_categories),
    )


@logger_decor
async def back_subcategory_callback(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    category_service: CategoryService = Provide[Container.bot_services_container.bot_category_service],
    user_service: UserService = Provide[Container.bot_services_container.bot_user_service],
):
    query = update.callback_query
    categories = await category_service.get_unarchived_parents_with_children_count()
    selected_categories_with_parents = await user_service.get_user_categories_with_parents(update.effective_user.id)

    await query.message.edit_text(
        "–ß—Ç–æ–±—ã —è –∑–Ω–∞–ª, —Å –∫–∞–∫–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏ —Ç—ã –≥–æ—Ç–æ–≤ –ø–æ–º–æ–≥–∞—Ç—å, "
        "–≤—ã–±–µ—Ä–∏ —Å–≤–æ–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å "
        '–Ω–µ—Å–∫–æ–ª—å–∫–æ). –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ, –Ω–∞–∂–º–∏ –Ω–∞ –ø—É–Ω–∫—Ç "–ì–æ—Ç–æ–≤–æ üëå"',
        reply_markup=await get_checked_categories_keyboard(categories, selected_categories_with_parents),
    )


def registration_handlers(app: Application):
    app.add_handler(CallbackQueryHandler(subcategories_callback, pattern=patterns.SUBCATEGORIES))
    app.add_handler(CallbackQueryHandler(select_subcategory_callback, pattern=patterns.SELECT_CATEGORY))
    app.add_handler(CallbackQueryHandler(back_subcategory_callback, pattern=patterns.BACK_SUBCATEGORY))
    app.add_handler(CallbackQueryHandler(view_old_categories_callback, pattern=callback_data.VIEW_CATEGORIES))
    app.add_handler(CallbackQueryHandler(categories_callback, pattern=callback_data.CHANGE_CATEGORY))
    app.add_handler(CallbackQueryHandler(categories_callback, pattern=callback_data.GET_CATEGORIES))
    app.add_handler(CallbackQueryHandler(confirm_categories_callback, pattern=callback_data.CONFIRM_CATEGORIES))
    app.add_handler(CallbackQueryHandler(all_right_categories_callback, pattern=callback_data.ALL_RIGHT_CATEGORIES))
