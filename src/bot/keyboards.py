from dependency_injector.wiring import Provide
from telegram import InlineKeyboardButton, InlineKeyboardMarkup

from src.bot.constants import callback_data, enum
from src.bot.services import ExternalSiteUserService
from src.bot.web_apps import get_feedback_web_app_info, get_task_web_app_info
from src.core.db.models import Category, ExternalSiteUser, Task, User
from src.core.depends import Container

VIEW_TASKS_BUTTON = [InlineKeyboardButton("üîé –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è", callback_data=callback_data.VIEW_TASKS)]
VIEW_CURRENT_TASKS_BUTTON = [
    InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è", callback_data=callback_data.VIEW_TASKS)
]
VIEW_CATEGORIES_BUTTON = [InlineKeyboardButton("üéì –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏", callback_data=callback_data.VIEW_CATEGORIES)]
CHANGE_CATEGORY_BUTTON = [InlineKeyboardButton("‚úç –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=callback_data.CHANGE_CATEGORY)]
ALL_RIGHT_CATEGORY_BUTTON = [InlineKeyboardButton("üëå –í—Å—ë –≤–µ—Ä–Ω–æ", callback_data=callback_data.MENU)]
UNSUBSCRIBE_BUTTON = [InlineKeyboardButton("‚è∏ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –∑–∞–¥–∞–Ω–∏–π", callback_data=callback_data.JOB_SUBSCRIPTION)]
SUBSCRIBE_BUTTON = [InlineKeyboardButton("‚ñ∂Ô∏è –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–¥–∞–Ω–∏—è", callback_data=callback_data.JOB_SUBSCRIPTION)]
OPEN_MENU_BUTTON = [InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é", callback_data=callback_data.MENU)]
RETURN_MENU_BUTTON = [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data=callback_data.MENU)]
CHECK_CATEGORIES_BUTTON = [
    InlineKeyboardButton("–ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏", callback_data=callback_data.CONFIRM_CATEGORIES)
]
SHOW_MORE_TASKS_BUTTON = [InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë –∑–∞–¥–∞–Ω–∏—è", callback_data=callback_data.VIEW_TASKS)]
SUPPORT_SERVICE_BUTTON = [
    InlineKeyboardButton("‚úç –ù–∞–ø–∏—Å–∞—Ç—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏", callback_data=callback_data.SUPPORT_SERVICE)
]
VIEW_TASKS_AGAIN_BUTTON = [
    InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞–Ω–∏—è –µ—â–µ —Ä–∞–∑", callback_data=callback_data.VIEW_TASKS_AGAIN)
]


def get_personal_account_button(
    registration_url: str = Provide[Container.settings.provided.procharity_registration_url],
) -> list[InlineKeyboardButton]:
    return [InlineKeyboardButton("üö™ –í–æ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", url=registration_url)]


def get_notification_settings_button(
    user: User,
    volunteer_auth_url: str = Provide[Container.settings.provided.procharity_volunteer_auth_url],
    fund_auth_url: str = Provide[Container.settings.provided.procharity_fund_auth_url],
) -> list[InlineKeyboardButton]:
    url = volunteer_auth_url if user.is_volunteer else fund_auth_url
    return [InlineKeyboardButton("üö™ –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", url=url)]


def get_support_service_button(user: User) -> list[InlineKeyboardButton]:
    return [InlineKeyboardButton("‚úç –ù–∞–ø–∏—Å–∞—Ç—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏", web_app=get_feedback_web_app_info(user))]


def get_response_to_task_button(task: Task, cancel: bool) -> list[InlineKeyboardButton]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –∑–∞–¥–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É –∏–ª–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–∫–ª–∏–∫–∞,
    –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ cancel.
    """
    text, action = ("–û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–∫–ª–∏–∫", "-") if cancel else ("–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è", "+")
    return [InlineKeyboardButton(text, callback_data=f"{action}respond_to_task_{task.id}")]


async def get_checked_categories_keyboard(
    categories: list[str, int, int], selected_categories: dict[Category] = None
) -> InlineKeyboardMarkup:
    keyboard = []
    selected_categories = {} if selected_categories is None else selected_categories
    for category_name, category_id, category_children_count in categories:
        if category_id in selected_categories:
            if category_children_count == len(selected_categories[category_id]):
                button = InlineKeyboardButton(f"‚úÖ {category_name}", callback_data=f"category_{category_id}")
            else:
                button = InlineKeyboardButton(f"‚òëÔ∏è  {category_name}", callback_data=f"category_{category_id}")
        else:
            button = InlineKeyboardButton(category_name, callback_data=f"category_{category_id}")
        keyboard.append([button])

    keyboard.append(
        [InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ üëå", callback_data=callback_data.CONFIRM_CATEGORIES)],
    )
    return InlineKeyboardMarkup(keyboard)


async def get_view_categories_keyboard() -> InlineKeyboardMarkup:
    keyboard = [ALL_RIGHT_CATEGORY_BUTTON, CHANGE_CATEGORY_BUTTON]
    return InlineKeyboardMarkup(keyboard)


async def get_subcategories_keyboard(
    parent_id: int,
    subcategories: list[Category],
    selected_categories: dict[Category] = None,
) -> InlineKeyboardMarkup:
    keyboard = []
    selected_categories = {} if selected_categories is None else selected_categories
    for category in subcategories:
        if category.id not in selected_categories:
            button = InlineKeyboardButton(category.name, callback_data=f"select_category_{category.id}")
        else:
            button = InlineKeyboardButton(f"‚úÖ {category.name}", callback_data=f"select_category_{category.id}")
        keyboard.append([button])

    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data=f"back_to_{parent_id}")])
    return InlineKeyboardMarkup(keyboard)


async def get_support_service_keyboard(user: User) -> InlineKeyboardMarkup:
    keyboard = [
        get_support_service_button(user),
        [InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data=callback_data.MENU)],
    ]
    return InlineKeyboardMarkup(keyboard)


async def get_menu_keyboard(user: User) -> InlineKeyboardMarkup:
    keyboard = (
        [
            VIEW_TASKS_BUTTON,
            SUPPORT_SERVICE_BUTTON,
            UNSUBSCRIBE_BUTTON if user.has_mailing else SUBSCRIBE_BUTTON,
            VIEW_CATEGORIES_BUTTON,
            get_notification_settings_button(user),
        ]
        if user.is_volunteer
        else [
            SUPPORT_SERVICE_BUTTON,
            get_notification_settings_button(user),
        ]
    )
    return InlineKeyboardMarkup(keyboard)


async def get_unregistered_user_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([get_personal_account_button()])


async def get_back_menu() -> InlineKeyboardMarkup:
    keyboard = [
        RETURN_MENU_BUTTON,
    ]
    return InlineKeyboardMarkup(keyboard)


async def get_tasks_list_end_keyboard():
    keyboard = [
        VIEW_TASKS_AGAIN_BUTTON,
        RETURN_MENU_BUTTON,
    ]
    return InlineKeyboardMarkup(keyboard)


async def get_start_keyboard(user: User) -> InlineKeyboardMarkup:
    keyboard = [
        CHECK_CATEGORIES_BUTTON if user.is_volunteer else [],
        OPEN_MENU_BUTTON,
    ]
    return InlineKeyboardMarkup(keyboard)


async def get_tasks_and_open_menu_keyboard() -> InlineKeyboardMarkup:
    keyboard = [
        VIEW_CURRENT_TASKS_BUTTON,
        OPEN_MENU_BUTTON,
    ]
    return InlineKeyboardMarkup(keyboard)


async def view_more_tasks_keyboard() -> InlineKeyboardMarkup:
    keyboard = [
        SHOW_MORE_TASKS_BUTTON,
        OPEN_MENU_BUTTON,
    ]
    return InlineKeyboardMarkup(keyboard)


async def get_tasks_and_back_menu_keyboard() -> InlineKeyboardMarkup:
    keyboard = [
        VIEW_TASKS_BUTTON,
        RETURN_MENU_BUTTON,
    ]
    return InlineKeyboardMarkup(keyboard)


def get_no_mailing_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø—Ä–∏—á–∏–Ω–∞–º–∏ –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—á—Ç—É"""
    keyboard = [[InlineKeyboardButton(reason, callback_data=f"reason_{reason.name}")] for reason in enum.REASONS]
    keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–µ –æ—Ç–º–µ–Ω—è—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=callback_data.MENU)])
    return InlineKeyboardMarkup(keyboard)


async def get_task_info_keyboard(
    task: Task,
    site_user: ExternalSiteUser,
    site_user_service: ExternalSiteUserService = Provide[Container.bot_services_container.bot_site_user_service],
) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞, –ø–æ–º–µ—â–∞–µ–º–∞—è –ø–æ–¥ –∫—Ä–∞—Ç–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º –∑–∞–¥–∞—á–∏"""
    return InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞–Ω–∏–µ", web_app=get_task_web_app_info(task))],
            get_response_to_task_button(task, await site_user_service.user_responded_to_task(site_user, task)),
        ]
    )


def get_cancel_respond_reason_keyboard(task: Task) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø—Ä–∏—á–∏–Ω–∞–º–∏ –æ—Ç–º–µ–Ω—ã –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ"""
    keyboard = [
        [InlineKeyboardButton(reason, callback_data=f"cancel_respond_to_task_{task.id}_reason_{reason.name}")]
        for reason in enum.CANCEL_RESPOND_REASONS
    ]
    keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–µ –æ—Ç–º–µ–Ω—è—Ç—å –æ—Ç–∫–ª–∏–∫", callback_data=f"keep_respond_to_task_{task.id}")])
    return InlineKeyboardMarkup(keyboard)
